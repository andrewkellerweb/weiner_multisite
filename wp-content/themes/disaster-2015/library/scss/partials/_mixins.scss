/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

@mixin bp($point) {
  @if $point == bp-xsmaller {
     @media (min-width: 400px) { @content ; }
  }
  @else if $point == bp-xsmall {
     @media (min-width: 481px) { @content ; }
  }
  @else if $point == bp-small {
     @media (min-width: 600px) { @content ; }
  }
  @else if $point == bp-small2 {
     @media (min-width: 750px) { @content ; }
  }
  @else if $point == bp-small3 {
     @media (min-width: 825px) { @content ; }
  }
  @else if $point == bp-medium {
     @media (min-width: 900px)  { @content ; }
  }
  @else if $point == bp-medium2 {
     @media (min-width: 1000px)  { @content ; }
  }
  @else if $point == bp-large {
   @media (min-width: 1100px)  { @content ; }
  }
  @else if $point == bp-xlarge {
     @media (min-width: $max-container-width)  { @content ; }
  }

  @else if $point == bp-max-medium {
     @media (max-width: 899px)  { @content ; }
  }
}

@mixin flexbox-container {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin flexbox-order($ordernumber) {
  order: $ordernumber;
  -webkit-box-ordinal-group: $ordernumber;  
  -moz-box-ordinal-group: $ordernumber;
  -webkit-order: $ordernumber;
  -ms-flex-order: $ordernumber;
}

@mixin hide-text {
  text-indent: 300%;
  white-space: nowrap;
  overflow: hidden;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -moz-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

@mixin omega-reset($nth, $columns) {
  &:nth-child(#{$nth}) {
    margin-right: flex-gutter($columns);
  }
  &:nth-child(#{$nth} + 1) {
    clear: none;
  }
}


